plugins {
  id "org.sonarqube" version "4.4.1.3373"
  id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
  id "com.hypherionmc.modutils.modpublisher" version "2.1.4" apply false
  id "fabric-loom" version "1.5-SNAPSHOT" apply false
}

sonar {
  properties {
    property "sonar.projectKey", "Crystal-Nest_${mod_id_kebab}"
    property "sonar.organization", "crystal-nest"
    property "sonar.projectVersion", mod_version
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.qualitygate.wait", "true"
  }
}

subprojects { subproject ->
  def noPublish = subproject.name === "common"
  def isFabric = subproject.name == "fabric"

  apply plugin: "java"
  apply plugin: "idea"
  apply plugin: "java-library"
  apply plugin: "com.hypherionmc.modutils.modpublisher"
  apply plugin: "maven-publish"
  if (isFabric) {
    apply plugin: "fabric-loom"
  }

  java.toolchain.languageVersion = JavaLanguageVersion.of(17)
  java.withSourcesJar()
  java.withJavadocJar()

  archivesBaseName = "${mod_id_kebab}-${subproject.name}"
  version = "${minecraft_version}-${mod_version}"

  jar {
    from(rootProject.file("LICENSE")) {
      rename { "${it}_${mod_title}" }
    }
    manifest {
      attributes([
        "Specification-Title"     : mod_title,
        "Specification-Vendor"    : mod_authors,
        "Specification-Version"   : project.version,
        "Implementation-Title"    : mod_title,
        "Implementation-Vendor"   : mod_authors,
        "Implementation-Version"  : project.version,
        "Implementation-URL"      : "https://github.com/${github_user}/${mod_id_kebab}/tree/${minecraft_version}",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        "Timestamp"               : System.currentTimeMillis(),
        "Built-On-Java"           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
        "Built-On-Minecraft"      : minecraft_version
      ])
    }
  }

  sourcesJar {
    from(rootProject.file("LICENSE")) {
      rename { "${it}_${mod_title}" }
    }
  }

  repositories {
    mavenCentral()
    maven {
      name = "Sponge / Mixin"
      url = "https://repo.spongepowered.org/repository/maven-public/"
    }
    maven {
      name = "Crystal Nest"
      url = "https://maven.crystalnest.it"
    }
    maven {
      name = "Fuzs Mod Resources"
      url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
  }

  tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.getRelease().set(17)
  }

  processResources {
    def expandProps = [
      "mod_version"                  : mod_version,
      "group"                        : project.group,
      "mod_authors"                  : mod_authors,
      "mod_title"                    : mod_title,
      "mod_id"                       : mod_id,
      "mod_id_kebab"                 : mod_id_kebab,
      "license"                      : license,
      "description"                  : project.description,
      "credits"                      : credits,
      "github_user"                  : github_user,
      "curseforge_id"                : curseforge_id,
      "minecraft_version"            : minecraft_version,
      "minecraft_version_range"      : minecraft_version_range,
      "fabric_version"               : fabric_version,
      "fabric_loader_version"        : fabric_loader_version,
      "forge_version"                : forge_version,
      "forge_loader_version_range"   : forge_loader_version_range,
      "cobweb_version"               : cobweb_version,
      "fcap_version"                 : fcap_version,
    ]

    filesMatching(["pack.mcmeta", "fabric.mod.json", "META-INF/mods.toml", "*.mixins.json"]) {
      expand expandProps
    }
    inputs.properties(expandProps)
  }

  tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
  }

  def changelog_body = "See [Changelog](https://github.com/${github_user}/${mod_id_kebab}/blob/master/CHANGELOG.md#v${mod_version.replaceAll('\\.', '')}---${new Date().format("yyyyMMdd")})."
  def version_type = mod_version.replaceFirst("([0-9]+\\.?)+-?", "") ?: "release"
  def loader = "Common"
  switch (subproject.name) {
    case "fabric":
      loader = "Fabric"
      break
    case "forge":
      loader = "Forge"
      break
  }

  publishing {
    repositories {
      maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/${github_user}/${mod_id_kebab}")
        credentials {
          username = github_user
          password = System.getenv("GITHUB_TOKEN") ?: ""
        }
      }
    }
    publications {
      gpr(MavenPublication) {
        groupId = project.group
        artifactId = "${mod_id_kebab}-${loader.toLowerCase()}"
        version = project.version
        from components.java
        pom {
          name = "[${loader} - ${minecraft_version}] ${mod_title} v${mod_version}"
          description = "${description}"
          url = "https://github.com/${github_user}/${mod_id_kebab}/tree/${minecraft_version}"
          issueManagement {
            system = "github"
            url = "https://github.com/${github_user}/${mod_id_kebab}/issues"
          }
          licenses {
            license {
              name = license
              url = "https://spdx.org/licenses/${license}.html"
            }
          }
          developers {
            mod_authors.split(", ").each { author ->
              developer {
                id = author.toLowerCase()
                name = author
              }
            }
          }
        }
      }
    }
  }

  publisher {
    apiKeys {
      github System.getenv("GITHUB_TOKEN") ?: ""
      modrinth System.getenv("MODRINTH_TOKEN") ?: ""
      curseforge System.getenv("CURSEFORGE_TOKEN") ?: ""
    }
    setDebug(noPublish)
    setVersion(mod_version)
    setChangelog(changelog_body)
    setVersionType(version_type)
    setArtifact(isFabric ? remapJar : jar)
    setDisableMalwareScanner(true) // Disable the built in Fractureizer scanner.
    setDisableEmptyJarCheck(true) // Disable check for valid mod metadata entry in artifact, which could possibly mean that the jar is empty.
    setModrinthID(mod_id_kebab)
    setCurseID(curseforge_id)
    if (!noPublish) {
      setLoaders(loader)
    }
    setGameVersions(minecraft_version)
    setDisplayName("[${loader} - ${minecraft_version}] ${mod_title} v${mod_version}")
    setJavaVersions([JavaVersion.VERSION_17])
    setCurseEnvironment("both") // "server", "client" or "both".
    github {
      repo = "${github_user}/${mod_id_kebab}"
      tag = "v${project.version}"
      displayName("v${project.version}")
      target = minecraft_version
      createTag = true
      createRelease = true
      updateRelease = true
      draft = false
    }
    modrinthDepends {
      required "cobweb"
      switch (loader) {
        case "Fabric":
          required "fabric-api"
          required "forge-config-api-port"
          break
        case "Forge":
          break
      }
    }
    curseDepends {
      required "cobweb"
      switch (loader) {
        case "Fabric":
          required "fabric-api"
          required "forge-config-api-port-fabric"
          break
        case "Forge":
          break
      }
    }
  }

  tasks.register("publishLoader") {
    group = "publishing"
    description = "Publish ${loader} specific versions to all platforms"
    dependsOn "publish"
    dependsOn "publishMod"
  }
}

tasks.register("publishAll") {
  group = "publishing"
  description = "Publish all loader specific versions to all platforms"
  dependsOn subprojects.publishLoader
}
