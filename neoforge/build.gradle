plugins {
  id "net.neoforged.gradle.userdev" version "7.0.84"
}

if (file("src/main/resources/META-INF/accesstransformer.cfg").exists()) {
  minecraft.accessTransformers.file file("src/main/resources/META-INF/accesstransformer.cfg")
}
runs {
  configureEach {
    modSource project.sourceSets.main
  }
  client {
    systemProperty "neoforge.enabledGameTestNamespaces", mod_id
  }
  server {
    systemProperty "neoforge.enabledGameTestNamespaces", mod_id
    programArgument "--nogui"
  }

  gameTestServer {
    systemProperty "neoforge.enabledGameTestNamespaces", mod_id
  }

  data {
    programArguments.addAll "--mod", mod_id, "--all", "--output", file("src/generated/resources/").getAbsolutePath(), "--existing", file("src/main/resources/").getAbsolutePath()
  }
}

sourceSets.main.resources { srcDir "src/generated/resources" }

dependencies {
  implementation "net.neoforged:neoforge:${neoforge_version}"
  implementation project(":common")
  implementation "it.crystalnest:cobweb-neoforge:${minecraft_version}-${cobweb_version}"
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
  source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
  source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
  from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
  from project(":common").sourceSets.main.resources
}

// Task seems bugged, breaks build because of mod dependencies in the Common project, with no apparent workaround.
tasks.named('compileTestJava').get().setEnabled(false)
